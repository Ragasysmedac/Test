#pragma checksum "D:\Abinesh\Xautomatedocker\Xautomate_docker\XAutomateMVC\XAutomateMVC\Views\DbConfig\DbConfig.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7f69674515d88994a3c1c41d00d1a66c67985ef6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_DbConfig_DbConfig), @"mvc.1.0.view", @"/Views/DbConfig/DbConfig.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Abinesh\Xautomatedocker\Xautomate_docker\XAutomateMVC\XAutomateMVC\Views\_ViewImports.cshtml"
using XAutomateMVC;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Abinesh\Xautomatedocker\Xautomate_docker\XAutomateMVC\XAutomateMVC\Views\_ViewImports.cshtml"
using XAutomateMVC.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Abinesh\Xautomatedocker\Xautomate_docker\XAutomateMVC\XAutomateMVC\Views\DbConfig\DbConfig.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7f69674515d88994a3c1c41d00d1a66c67985ef6", @"/Views/DbConfig/DbConfig.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b3eb3a5bd4bb195597699a36c34031f9ee5ad7c0", @"/Views/_ViewImports.cshtml")]
    public class Views_DbConfig_DbConfig : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<ProductViewModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "SQL", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "MYSQL", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/ExportExcel.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("cursor: pointer;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "D:\Abinesh\Xautomatedocker\Xautomate_docker\XAutomateMVC\XAutomateMVC\Views\DbConfig\DbConfig.cshtml"
  
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f69674515d88994a3c1c41d00d1a66c67985ef65520", async() => {
                WriteLiteral(@"
    <script>
        /* Loop through all dropdown buttons to toggle between hiding and showing its dropdown content - This allows the user to have multiple dropdowns without any conflict */


        $(document).ready(function ($) {
            debugger;
            var dropdown = document.getElementsByClassName(""dropdown-btn"");
            var i;

            for (i = 0; i < dropdown.length; i++) {
                dropdown[i].addEventListener(""click"", function () {
                    this.classList.toggle(""active"");
                    var dropdownContent = this.nextElementSibling;
                    if (dropdownContent.style.display === ""block"") {
                        dropdownContent.style.display = ""none"";
                    } else {
                        dropdownContent.style.display = ""block"";
                    }
                });
            }

            $(""#DbStatus"").val(""1"");
            $(""#Databasetype"").change(function () {
                var value = $(""#DbC");
                WriteLiteral(@"onfigId"").val();
                var database = $(this).val();
                if (database == ""SQL"") {
                    $(""#portview"").addClass(""hidden"");
                }
                else {
                    $(""#portview"").removeClass(""hidden"");
                }
                if (value != null) {
                    $(""#Success"").html("""");
                    $(""#Error"").html("""");
                    $(""#Dbhost"").val('');
                    $(""#dbName"").val('');
                    $(""#dbPort"").val('');
                    $(""#password"").val('');
                    $(""#Description"").val('');
                    $(""#dbusernaem"").val('');
                    $(""#update"").addClass(""hidden"");
                    $(""#Save"").removeClass(""hidden"");
                    var table = document.getElementById('example');
                    var cells = table.getElementsByTagName('td');
                    for (var i = 0; i < cells.length; i++) {
                        var rowsNotSel");
                WriteLiteral(@"ected = table.getElementsByTagName('tr');
                        for (var row = 0; row < rowsNotSelected.length; row++) {
                            rowsNotSelected[row].style.backgroundColor = """";
                            rowsNotSelected[row].classList.remove('highlight');
                        }
                    }
                }
            });
            $("".toggle-confirm-password"").click(function () {
                debugger;
                $(""#fa-fw field-icon"").toggleClass(""fa-eye-slash"");
                var input = $(""#password"");
                var input1 = $(""#password"").attr(""type"");
                //var input = $($(this).attr(""toggle""));
                if (input.attr(""type"") != ""password"") {
                    input.attr(""type"", ""password"");
                } else {
                    input.attr(""type"", ""text"");
                }
            });
            $(""#update"").addClass(""hidden"");
            $(""#Status"").prop(""checked"", true);

            $(d");
                WriteLiteral(@"ocument).on(""click"", ""#Save"", function () {
                debugger;
                $(""#Error"").html('');
                $(""#Success"").html('');
                var Active = 1;

                var Name = $(""#dbName"").val();
                if (Name == null || Name == """" || Name == undefined) {
                    $(""#Error"").html(""Please Enter DB Name"");
                    return false;
                }
                var DemoName = $(""#Dbhost"").val();
                if (DemoName == null || DemoName == """" || DemoName == undefined) {
                    $(""#Error"").html(""Please Enter Host Name"");
                    return false;
                }
                var DbPortname = """";
                var Databasetype = $(""#Databasetype"").val();
                if (Databasetype == ""MYSQL"") {
                    DbPortname = $(""#dbPort"").val();
                    if (DbPortname == null || DbPortname == """" || DbPortname == undefined) {
                        $(""#Error"").html(""Please ");
                WriteLiteral(@"Enter Database Port Number"");
                        return false;
                    }
                }


                if (Databasetype == null || Databasetype == """" || Databasetype == undefined) {
                    $(""#Error"").html(""please Select Database Type"");
                    return false;
                }
                var UserName = $(""#dbusernaem"").val();
                if (UserName == null || UserName == """" || UserName == undefined) {
                    $(""#Error"").html(""please Enter Database User Name"");
                    return false
                }
                var Password = $(""#password"").val();
                if (Password == null || Password == """" || Password == undefined) {
                    $(""#Error"").html(""please Enter Database Password"");
                    return false;
                }
                var Des = $(""#Description"").val();
                if (Password == null || Password == """" || Password == undefined) {
                    ");
                WriteLiteral(@"Des = """";
                }

                if ($('#Status').is(':checked')) {
                    Active = 1;
                }
                else {
                    $(""#Error"").html(""Please Check Active Check box"");
                }
                $.ajax(
                    {
                        type: ""GET"", //HTTP POST Method
                        url: ""/DbConfig/DbconfigSave"", // Controller/View
                        datatype: ""json"",
                        data: {
                            Databasetype1: Databasetype,
                            Dbname: Name,
                            Dbhost: DemoName,
                            DbPortname: DbPortname,
                            Dbuser: UserName,
                            DbPassword: Password,
                            Active: Active,
                            Describtion: Des

                        },
                        headers: {
                            ""Content-Type"": JSON,
          ");
                WriteLiteral(@"                  'Authorization': localStorage.getItem(""AuthoToken""),
                        },
                        success: function (data) {
                            debugger;
                            var response = data;
                            if (response == ""Success"") {
                                $(""#Dbhost"").val('');
                                $(""#dbName"").val('');
                                $(""#dbPort"").val('');
                                $(""#password"").val('');
                                $(""#Description"").val('');
                                $(""#dbusernaem"").val('');
                                $(""#Success"").html(""Connection Successfully Saved"");
                                Bindrid1(1);
                            }
                            else if (response == ""Valid Db"") {
                                $(""#Error"").html(""Please Enter Valid Connection"");
                            }
                            else if (respo");
                WriteLiteral(@"nse == ""Auth Fail"") {
                                $(""#Error"").html(""Authentication Failed,Your Session Failed"");
                                return false;
                            }
                            else {
                                $(""#Error"").html(""Already Connection Exits"");
                            }

                        },
                        error: function (Result) {

                        }

                    });
            });


            $(document).on(""click"", ""#update"", function () {
                debugger;
                $(""#Error"").html('');
                $(""#Success"").html('');
                var Name = $(""#dbName"").val();
                if (Name == null || Name == """" || Name == undefined) {
                    $(""#Error"").html(""Please Enter DB Name"");
                    return false;
                }
                var DemoName = $(""#Dbhost"").val();
                if (DemoName == null || DemoName == """" || DemoNa");
                WriteLiteral(@"me == undefined) {
                    $(""#Error"").html(""Please Enter Host Name"");
                    return false;
                }
                var DbPortname = """";
                var Databasetype = $(""#Databasetype"").val();
                if (Databasetype == ""MYSQL"") {
                    DbPortname = $(""#dbPort"").val();
                    if (DbPortname == null || DbPortname == """" || DbPortname == undefined) {
                        $(""#Error"").html(""Please Enter Database Port Number"");
                        return false;
                    }
                }


                if (Databasetype == null || Databasetype == """" || Databasetype == undefined) {
                    $(""#Error"").html(""please Select Database Type"");
                    return false;
                }
                var UserName = $(""#dbusernaem"").val();
                if (UserName == null || UserName == """" || UserName == undefined) {
                    $(""#Error"").html(""please Enter Database User");
                WriteLiteral(@" Name"");
                    return false;
                }

                var Password = $(""#password"").val();
                if (Password == null || Password == """" || Password == undefined) {
                    $(""#Error"").html(""please Enter Database Password"");
                    return false;
                }
                var Des = $(""#Description"").val();
                if (Password == null || Password == """" || Password == undefined) {
                    Des = """";
                }
                if ($('#Status').is(':checked')) {
                    Active = 1;
                }
                else {
                    Active = 0;
                }
                var dbconfId = $(""#DbConfigId"").val();
                $.ajax(
                    {
                        type: ""GET"", //HTTP POST Method
                        url: ""/DbConfig/DbConfigUpdate"", // Controller/View
                        datatype: ""json"",
                        data: {
             ");
                WriteLiteral(@"               Databasetype1: Databasetype,
                            Dbname: Name,
                            Dbhost: DemoName,
                            DbPortname: DbPortname,
                            Dbuser: UserName,
                            DbPassword: Password,
                            Active: Active,
                            Describtion: Des,
                            DbConfigId: dbconfId

                        },
                        headers: {
                            ""Content-Type"": JSON,
                            'Authorization': localStorage.getItem(""AuthoToken""),
                        },
                        success: function (data) {
                            debugger;
                            var response = data;
                            if (response == ""Success"") {
                                $(""#Dbhost"").val('');
                                $(""#dbName"").val('');
                                $(""#dbPort"").val('');
     ");
                WriteLiteral(@"                           $(""#password"").val('');
                                $(""#Description"").val('');
                                $(""#update"").addClass(""hidden"");
                                $(""#Save"").removeClass(""hidden"");
                                $(""#dbusernaem"").val('');
                                $(""#Success"").html(""Connection Successfully Updated"");
                                Bindrid1(1);
                            }
                            else if (response == ""Auth Fail"") {
                                $(""#Error"").html(""Authentication Failed,Your Session Failed"");
                                return false;
                            }
                            else {
                                $(""#Error"").html(""Connection TimeOut"");
                            }

                        },
                        error: function (Result) {

                        }

                    });
            });

            $(docum");
                WriteLiteral(@"ent).on(""click"", ""#excel"", function () {
                var uri = 'data:application/vnd.ms-excel;base64,'
                    , template = '<html xmlns:o=""urn:schemas-microsoft-com:office:office"" xmlns:x=""urn:schemas-microsoft-com:office:excel"" xmlns=""http://www.w3.org/TR/REC-html40""><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>'
                    , base64 = function (s) { return window.btoa(unescape(encodeURIComponent(s))) }
                    , format = function (s, c) { return s.replace(/{(\w+)}/g, function (m, p) { return c[p]; }) }

                var table = document.getElementById(""example"");
                //var example1 = $('.example1');

                //var filters = $('.ng-table-filters').remove();
                var ctx = { worksh");
                WriteLiteral(@"eet: name || 'Worksheet', table: table.innerHTML };
                //$('.ng-table-sort-header').after(filters);
                var url = uri + base64(format(template, ctx));
                var a = document.createElement('a');
                a.href = url;

                //var today = new Date();
                //var date = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ' ' + today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();

                a.download = 'connections.xls';
                a.click();
            });
            $(document).on('click', '#Clear', function () {
                clear();
            });
            function clear() {
                $(""#Success"").html("""");
                $(""#Error"").html("""");
                $(""#DbStatus"").val(""1"");
                $(""#Dbhost"").val('');
                $(""#dbName"").val('');
                $(""#dbPort"").val('');
                $(""#password"").val('');
                $(");
                WriteLiteral(@"""#Description"").val('');
                $(""#InActive"").removeClass(""hidden"");
                $(""#Active"").addClass(""hidden"");
                $(""#dbusernaem"").val('');
                $(""#update"").addClass(""hidden"");
                $(""#Save"").removeClass(""hidden"");
                var table = document.getElementById('example');
                var cells = table.getElementsByTagName('td');
                for (var i = 0; i < cells.length; i++) {
                    var rowsNotSelected = table.getElementsByTagName('tr');
                    for (var row = 0; row < rowsNotSelected.length; row++) {
                        rowsNotSelected[row].style.backgroundColor = """";
                        rowsNotSelected[row].classList.remove('highlight');
                    }
                }
            }

            Bindrid(1);


        });

        $(document).on(""click"", ""#Searchlist"", function () {
            debugger;
            var searchres = $(""#search"").val();
            var Stat");
                WriteLiteral(@"us = $(""#DbStatus"").val();
            $.ajax(
                {
                    type: ""GET"", //HTTP POST Method
                    url: ""/DbConfig/SearchDbConfig"", // Controller/View
                    datatype: ""json"",
                    data: {
                        search: searchres,
                        Status: Status,
                    },
                    headers: {
                        ""Content-Type"": JSON,
                        'Authorization': localStorage.getItem(""AuthoToken""),
                    },
                    success: function (data) {
                        debugger;
                        if (data == ""Auth Fail"") {
                            $(""#Error"").html(""Authentication Failed"");
                            return false;
                        }
                        $('#tblAuthgrid').empty();
                        var tr;
                        if (data.length > 0) {
                            for (var i = 0; i < data.length; i");
                WriteLiteral(@"++) {
                                tr = $('<tr/>');
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].dbHostName + ""</td>"");
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].dbName + ""</td>"");
                                tr.append(""<td OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].dbPort + ""</td>"");
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].dbUser + ""</td>"");
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].description + ""</td>"");
                                tr.append(""<td OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].createDa");
                WriteLiteral(@"te + ""</td>"")
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].status + ""</td>"");
                                if (data[i].status == ""Inactive"") {
                                    tr.append(""<td  OnClick='deletefun("" + data[i].dbconfigid + "");'  style='cursor: pointer;'><i class='fa fa-trash-alt;'></i></td>"");
                                }
                                $('#tblAuthgrid').append(tr);
                            }
                        }

                    },
                    error: function (Result) {

                    }

                });
        });
        function Bindrid(Active) {
            if (Active == ""1"") {
                $(""#InActive"").removeClass(""hidden"");
                $(""#Active"").addClass(""hidden"");
                $(""#DbStatus"").val(""1"");
            }
            else {
                $(""#InActive"").addClass(""hidden"");
              ");
                WriteLiteral(@"  $(""#Active"").removeClass(""hidden"");
                $(""#DbStatus"").val(""0"");

            }
            $.ajax(
                {
                    type: ""GET"", //HTTP POST Method
                    url: ""/DbConfig/BindGrid"", // Controller/View
                    datatype: ""json"",
                    data: { status: Active },
                    headers: {
                        ""Content-Type"": JSON,
                        'Authorization': localStorage.getItem(""AuthoToken""),
                    },
                    success: function (data) {
                        debugger;
                        if (data == ""Auth Fail"") {
                            $(""#Error"").html(""Authentication Failed"");
                            return false;
                        }
                        $('#tblAuthgrid').empty();
                        var tr;
                        if (data.length > 0) {

                            for (var i = 0; i < data.length; i++) {

                ");
                WriteLiteral(@"                tr = $('<tr/>');
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].dbconfigid + ""</td>"");
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].dbHostName + ""</td>"");
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].dbName + ""</td>"");
                                tr.append(""<td OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].dbPort + ""</td>"");
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].dbUser + ""</td>"");
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].description + ""</td>"");
      ");
                WriteLiteral(@"                          tr.append(""<td OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].createDate + ""</td>"")
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].status + ""</td>"");
                                tr.append(""<td> <span  OnClick='deletefun("" + data[i].dbconfigid + "");'  style='cursor: pointer;'>  "" + (data[i].status == ""Inactive"" ? ""<img src='http://40.115.111.12:5000/Image/delete-trash-icon-256.png' style='height:25px' />"" : """") + "" </span></td>"");
                                //if (data[i].status == ""Inactive"") {
                                //    tr.append(""<td  OnClick='deletefun("" + data[i].dbconfigid + "");'  style='cursor: pointer;'><i class='fa fa-trash-alt;'></i></td>"");
                                //}
                                //   tr.append(""<td> <label>test<label></td>"");
                                $('#tblAuthgrid').appen");
                WriteLiteral(@"d(tr);


                            }
                            $('#example').DataTable({
                                paging: true,
                                scrollX: true,
                                lengthChange: true,
                                searching: true,
                                ordering: false
                            });

                        }

                    },
                    error: function (Result) {

                    }

                });
        }


        function Bindrid1(Active) {
            if (Active == ""1"") {
                $(""#InActive"").removeClass(""hidden"");
                $(""#Active"").addClass(""hidden"");
                $(""#DbStatus"").val(""1"");
            }
            else {
                $(""#InActive"").addClass(""hidden"");
                $(""#Active"").removeClass(""hidden"");
                $(""#DbStatus"").val(""0"");

            }
            $.ajax(
                {
                    typ");
                WriteLiteral(@"e: ""GET"", //HTTP POST Method
                    url: ""/DbConfig/BindGrid"", // Controller/View
                    datatype: ""json"",
                    data: { status: Active },
                    headers: {
                        ""Content-Type"": JSON,
                        'Authorization': localStorage.getItem(""AuthoToken""),
                    },
                    success: function (data) {
                        debugger;
                        if (data == ""Auth Fail"") {
                            $(""#Error"").html(""Authentication Failed"");
                            return false;
                        }
                        $('#tblAuthgrid').empty();
                        $('#example').DataTable().clear().destroy();
                        var tr;
                        if (data.length > 0) {

                            for (var i = 0; i < data.length; i++) {

                                tr = $('<tr/>');
                                tr.append(""<td  OnClick='");
                WriteLiteral(@"display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].dbconfigid + ""</td>"");
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].dbHostName + ""</td>"");
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].dbName + ""</td>"");
                                tr.append(""<td OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].dbPort + ""</td>"");
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].dbUser + ""</td>"");
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].description + ""</td>"");
                                tr.append(""<td OnClick='display(this,"" + data[i].dbconfigid + "");");
                WriteLiteral(@"'  style='    cursor: pointer;'>"" + data[i].createDate + ""</td>"")
                                tr.append(""<td  OnClick='display(this,"" + data[i].dbconfigid + "");'  style='    cursor: pointer;'>"" + data[i].status + ""</td>"");
                                tr.append(""<td> <span  OnClick='deletefun("" + data[i].dbconfigid + "");'  style='cursor: pointer;'>  "" + (data[i].status == ""Inactive"" ? ""<img src='http://40.115.111.12:5000/Image/delete-trash-icon-256.png' style='height:25px' />"" : """") + "" </span></td>"");

                                //tr.append(""<td  OnClick='deletefun("" + data[i].dbconfigid + "");'  style='cursor: pointer;'><i class='fa fa-trash-alt;'></i></td>"");
                                //if (data[i].status == ""Inactive"") {
                                //    tr.append(""<td ><i class='fa fa-trash-alt'  OnClick='deletefun("" + data[i].dbconfigid + "");'  style='cursor: pointer;'></i></td>"");
                                //}

                                $('#tblAuthgrid').append");
                WriteLiteral(@"(tr);


                            }
                        
                            $('#example').DataTable({
                                paging: true,
                                scrollX: true,
                                lengthChange: true,
                                searching: true,
                                ordering: false
                            });
                        }

                    },
                    error: function (Result) {

                    }

                });
        }

        function deletefun(dbid) {
            $.ajax(
                {
                    type: ""GET"", //HTTP POST Method
                    url: ""/DbConfig/deletevalues"", // Controller/View
                    datatype: ""json"",
                    data: { dbconfig: dbid },
                    headers: {
                        ""Content-Type"": JSON,
                        'Authorization': localStorage.getItem(""AuthoToken""),
                ");
                WriteLiteral(@"    },
                    success: function (data) {
                        debugger;
                        if (data == ""Auth Fail"") {
                            $(""#Error"").html(""Authentication Failed"");
                            return false;
                        }

                        Bindrid1(1);
                    },
                    error: function (Result) {

                    }

                });
        }

        function display(a, val) {
            $(""#Error"").html("""");
            $(""#Success"").html("""");
            $(""#Save"").addClass(""hidden"");
            $(""#update"").removeClass(""hidden"");
            var table = document.getElementById('example');
            var cells = table.getElementsByTagName('td');
            for (var i = 0; i < cells.length; i++) {
                var rowsNotSelected = table.getElementsByTagName('tr');
                for (var row = 0; row < rowsNotSelected.length; row++) {
                    rowsNotSelected[row].sty");
                WriteLiteral(@"le.backgroundColor = """";
                    rowsNotSelected[row].classList.remove('highlight');
                }
            }
            a.parentNode.classList.add(""highlight"");
            debugger;
            $.ajax(
                {
                    type: ""GET"", //HTTP POST Method
                    url: ""/DbConfig/Editdbconfig"", // Controller/View
                    datatype: ""json"",
                    data: { DbconfigId: val },
                    headers: {
                        ""Content-Type"": JSON,
                        'Authorization': localStorage.getItem(""AuthoToken""),
                    },
                    success: function (data) {
                        var result = data;
                        if (data == ""Auth Fail"") {
                            $(""#Error"").html(""Authentication Failed"");
                            return false;
                        }
                        $(""#DbConfigId"").val(data[""0""].dbconfigid);
                        $(""");
                WriteLiteral(@"#dbName"").val(data[""0""].dbName);
                        $(""#Dbhost"").val(data[""0""].dbHostName);
                        $(""#dbPort"").val(data[""0""].dbPort);
                        $(""#dbusernaem"").val(data[""0""].dbUser);
                        $(""#password"").val(data[""0""].dbPassword);
                        $(""#Description"").val(data[""0""].description);
                        $(""#Databasetype"").val(data[""0""].databaseType);

                        var databasetpe = data[""0""].databaseType;
                        var status = data[""0""].status;
                        if (status == ""1"") {
                            $(""#Status"").prop(""checked"", true);
                        }
                        else {
                            $(""#Status"").prop(""checked"", false);
                        }
                        if (databasetpe == ""SQL"") {
                            $(""#portview"").addClass(""hidden"");
                        }
                        else {
                        ");
                WriteLiteral(@"    $(""#portview"").removeClass(""hidden"");
                        }

                        debugger;

                    },
                    error: function (Result) {
                    }

                });
        }
        debugger;

    </script>

    <div>




                <h3 style=""        color: #ba9122; padding: 14px; margin-left: 42px;"">Connections</h3>
                <div class=""container"" style=""        background-color: white;
        padding: 28px;
        padding-bottom: 60px;"">
                    <div class=""content"">
                        <div class="" container-scroller"">


                            <div class=""row"">
                                <div class=""col-lg-3 col-md-3 col-xs-3 col-sm-3"">
                                    <label><span style=""color: red;"">* </span>DataBase Type</label><br />
                                    <select class=""form-control"" id=""Databasetype"">
                                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f69674515d88994a3c1c41d00d1a66c67985ef638317", async() => {
                    WriteLiteral("Select DataBase Type");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                BeginWriteTagHelperAttribute();
                __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
                __tagHelperExecutionContext.AddHtmlAttribute("selected", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
                BeginWriteTagHelperAttribute();
                __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
                __tagHelperExecutionContext.AddHtmlAttribute("disabled", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f69674515d88994a3c1c41d00d1a66c67985ef640241", async() => {
                    WriteLiteral("SQL");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7f69674515d88994a3c1c41d00d1a66c67985ef641502", async() => {
                    WriteLiteral("MYSQL");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                                    </select>
                                </div>
                                <div class=""col-lg-3 col-md-3 col-xs-3 col-sm-3"" style=""text-align: left;"">
                                    <label><span style=""color: red;"">* </span>DB Name</label><br />
                                    <input type=""text"" id=""dbName"" name=""Name"" class=""txt-input form-control"" maxlength=""30""");
                BeginWriteAttribute("value", " value=", 31486, "", 31509, 1);
#nullable restore
#line 653 "D:\Abinesh\Xautomatedocker\Xautomate_docker\XAutomateMVC\XAutomateMVC\Views\DbConfig\DbConfig.cshtml"
WriteAttributeValue("", 31493, ViewBag.testing, 31493, 16, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral(@" />
                                </div>
                                <div class=""col-lg-3 col-md-3 col-xs-3 col-sm-3"">
                                    <label><span style=""color: red;"">* </span>DB Host</label><br />
                                    <input type=""text"" id=""Dbhost"" class=""txt-input form-control"" maxlength=""35"" />
                                </div>

                                <div class=""col-lg-3 col-md-3 col-xs-3 col-sm-3"" id=""portview"">
                                    <label><span style=""color: red;"">* </span>DB Port No</label><br />
                                    <input type=""number"" id=""dbPort"" class=""txt-input form-control"" maxlength=""6"" />
                                </div>

                            </div>

                            <div class=""row"" style=""padding-top:10px"">
                                <div class=""col-lg-3 col-md-3 col-xs-3 col-sm-3"">
                                    <label><span style=""color: red;"">* </span>DB U");
                WriteLiteral(@"serName</label><br />
                                    <input type=""text"" id=""dbusernaem"" class=""txt-input form-control"" maxlength=""35"" />
                                </div>
                                <div class=""col-lg-3 col-md-3 col-xs-3 col-sm-3"">
                                    <label><span style=""color: red;"">* </span>DB Password</label><br />
                                    <input type=""password"" id=""password"" name=""password"" class=""txt-input form-control"" maxlength=""25"" />

");
                WriteLiteral(@"                                </div>
                                <div class=""col-lg-3 col-xs-3 col-sm-6 col-md-6"">
                                    <label>Description</label> <br />
                                    <input type=""text"" id=""Description"" class=""txt-input form-control"" placeholder=""Description"" maxlength=""50"" />
                                </div>
                            </div>
                        </div>
                        <!-- partial:../../partials/_footer.html -->

                    </div>

                </div>

                <div class=""container"" style=""        background-color: #eeeeee;
        padding: 10px;
        padding-bottom: unset;
        margin-top: 15px"">
                    <div class=""row"" style=""        padding: 17px
"">
                        <div class=""col-lg-6 col-md-6 col-xs-6 col-sm-6"" style=""text-align:left"">
                            <input type=""checkbox"" id=""Status""> Set As active
                            <di");
                WriteLiteral(@"v class=""col-md-12 col-lg-12 col-sm-12 col-xs-12"">
                                <label style=""color:red;text-align:center"" id=""Error""></label>
                                <label style=""color:green;text-align:center"" id=""Success""></label>
                            </div>

                        </div>
                        <div class=""col-lg-6 col-md-6 col-xs-6 col-sm-6"" style=""text-align:right"">
                            <input type=""button"" class=""text-center center-block"" style=""        color: white;background-color: #c9a642"" id=""Save"" value=""SAVE"">
                            <input type=""button"" class=""text-center center-block hidden"" style=""       color: white;background-color: #c9a642"" id=""update"" value=""Update"">
                            <input type=""button"" class=""text-center center-block clear"" style=""   color: black;"" id=""Clear"" value=""Clear"">
                            <input type=""hidden"" id=""DbConfigId"" />
                            <input type=""hidden"" id=""DbStatus"" ");
                WriteLiteral(@"/>
                        </div>

                    </div>
                </div>
                <div class=""container"" style=""        background-color: white;

        padding-bottom: unset;
        margin-top: 15px"">

                    <div class=""container"" style=""     background-color: white;    padding: 44px; padding-top: 15px; padding-bottom: 100px;"">
                        <div class=""content"">
                            <div class="" container-scroller"">


");
                WriteLiteral("\r\n                                <div class=\"form-group\" id=\"Excelpos\">\r\n\r\n\r\n                                    <button type=\"button\" class=\"btn  btn-sm\" id=\"excel\">\r\n                                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "7f69674515d88994a3c1c41d00d1a66c67985ef648197", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                                    </button>
                                </div>
                                <div class=""row"" style=""margin-top:25px"">
                                    <div class=""col-sm-12 mat-elevation-z8""
                                         style=""box-shadow: unset;padding: 0px ;"" #TABLE>
                                        <table class=""table"" id=""example"" style=""width: 100%;"" border=""1"">
                                            <thead>
                                                <tr>
                                                    <td style="" width: 50px;"">
                                                        DB Id
                                                    </td>
                                                    <td style="" width: 50px;"">
                                                        DB Host
                                                    </td>
                                                    <td style="" width: ");
                WriteLiteral(@"50px;"">
                                                        DB Name
                                                    </td>
                                                    <td style="" width: 50px;"">
                                                        DB Port No
                                                    </td>
                                                    <td style="" width: 50px;"">
                                                        DB User
                                                    </td>

                                                    <td style="" width: 200px;"">
                                                        Description

                                                    </td>
                                                    <td style="" width: 100px;"">
                                                        Creation Date
                                                    </td>
                                                    <td ");
                WriteLiteral(@"style="" width: 50px;"">
                                                        Status
                                                    </td>
                                                    <td style="" width: 50px;"">
                                                        Delete
                                                    </td>
                                                </tr>
                                            </thead>
                                            <tbody id=""tblAuthgrid""></tbody>

                                        </table>
                                    </div>

                                </div>
                            </div>
                            <!-- partial:../../partials/_footer.html -->

                        </div>


                    </div>

                </div>
            </div>
            <!-- /#page-content-wrapper -->

        </div>
        <!-- /#wrapper -->
        <!-- Bootstrap core JavaScri");
                WriteLiteral("pt -->\r\n        <!-- Menu Toggle Script -->\r\n\r\n    </div>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<ProductViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
