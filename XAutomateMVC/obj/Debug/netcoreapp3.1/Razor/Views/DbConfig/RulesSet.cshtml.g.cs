#pragma checksum "D:\Abinesh\Xautomatedocker\Xautomate_docker\XAutomateMVC\XAutomateMVC\Views\DbConfig\RulesSet.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cc3c0d2ce1638a2ea9c12e1211d283cc44b29696"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_DbConfig_RulesSet), @"mvc.1.0.view", @"/Views/DbConfig/RulesSet.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Abinesh\Xautomatedocker\Xautomate_docker\XAutomateMVC\XAutomateMVC\Views\_ViewImports.cshtml"
using XAutomateMVC;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Abinesh\Xautomatedocker\Xautomate_docker\XAutomateMVC\XAutomateMVC\Views\_ViewImports.cshtml"
using XAutomateMVC.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cc3c0d2ce1638a2ea9c12e1211d283cc44b29696", @"/Views/DbConfig/RulesSet.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b3eb3a5bd4bb195597699a36c34031f9ee5ad7c0", @"/Views/_ViewImports.cshtml")]
    public class Views_DbConfig_RulesSet : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<ProductViewModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-control chosen"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("multiple", new global::Microsoft.AspNetCore.Html.HtmlString("true"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("submit"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("button text-center center-block"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("        color: white;background-color: #c9a642"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "DbConfig", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "RULEUploadToFile", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("Id", new global::Microsoft.AspNetCore.Html.HtmlString("Templete"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString(" button text-center center-block"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "TemplateDownload", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("formid"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("enctype", new global::Microsoft.AspNetCore.Html.HtmlString("multipart/form-data"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/ExportExcel.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("cursor: pointer;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/vendor/bootstrap/js/bootstrap.bundle.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\Abinesh\Xautomatedocker\Xautomate_docker\XAutomateMVC\XAutomateMVC\Views\DbConfig\RulesSet.cshtml"
  
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cc3c0d2ce1638a2ea9c12e1211d283cc44b296969695", async() => {
                WriteLiteral(@"
    <style>
        .dropdown1-container {
            display: block !important;
        }

        .dropdown3-container {
            display: block !important;
        }
    </style>
    <script>
        /* Loop through all dropdown buttons to toggle between hiding and showing its dropdown content - This allows the user to have multiple dropdowns without any conflict */

        $(document).ready(function ($) {
            debugger;
            var dropdown = document.getElementsByClassName(""dropdown-btn"");
            var i;

            for (i = 0; i < dropdown.length; i++) {
                dropdown[i].addEventListener(""click"", function () {
                    this.classList.toggle(""active"");
                    var dropdownContent = this.nextElementSibling;
                    if (dropdownContent.style.display === ""block"") {
                        dropdownContent.style.display = ""none"";
                    } else {
                        dropdownContent.style.display = ""blo");
                WriteLiteral(@"ck"";
                    }
                });
            }
            var dropdown = document.getElementsByClassName(""dropdown-btn1"");
            var i;

            for (i = 0; i < dropdown.length; i++) {
                dropdown[i].addEventListener(""click"", function () {
                    this.classList.toggle(""active"");
                    var dropdownContent = this.nextElementSibling;
                    if (dropdownContent.style.display === ""block"") {
                        dropdownContent.style.display = ""none"";
                    } else {
                        dropdownContent.style.display = ""block"";
                    }
                });
            }
            var dropdown = document.getElementsByClassName(""dropdown-btn2"");
            var i;

            for (i = 0; i < dropdown.length; i++) {
                dropdown[i].addEventListener(""click"", function () {
                    this.classList.toggle(""active"");
                    var dropdownContent = this.ne");
                WriteLiteral(@"xtElementSibling;
                    if (dropdownContent.style.display === ""block"") {
                        dropdownContent.style.display = ""none"";
                    } else {
                        dropdownContent.style.display = ""block"";
                    }
                });
            }
            //$(""#Templete"").click(function () {

            //    var uri = 'data:application/vnd.ms-excel;base64,'
            //        , template = '<html xmlns:o=""urn:schemas-microsoft-com:office:office"" xmlns:x=""urn:schemas-microsoft-com:office:excel"" xmlns=""http://www.w3.org/TR/REC-html40""><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>'
            //        , base64 = function (s) { return window.btoa(unescape(encodeURIComponent(s))) }
         ");
                WriteLiteral(@"   //        , format = function (s, c) { return s.replace(/{(\w+)}/g, function (m, p) { return c[p]; }) }
            //    var table = document.getElementById(""exampleimport"");
            //    var ctx = { worksheet: name || 'Worksheet', table: table.innerHTML };
            //    var url = uri + base64(format(template, ctx));
            //    var a = document.createElement('a');
            //    a.href = url;

            //    a.download = 'RuleTemplate.xls';//downloading template name
            //    a.click();
            //});
            $(""#Rulestatus"").val(""1"");
            $(document).on(""click"", ""#Searchlist"", function () {
                debugger;
                var searchres = $(""#search"").val();
                var status = $(""#Rulestatus"").val();
                $.ajax(
                    {
                        type: ""GET"", //HTTP POST Method
                        url: ""/DbConfig/SearchRules"", // Controller/View
                        datatype: ""json"",
       ");
                WriteLiteral(@"                 data: {
                            search: searchres,
                            Status: status,
                        },
                        headers: {
                            ""Content-Type"": JSON,
                            'Authorization': localStorage.getItem(""AuthoToken""),
                        },
                        success: function (data) {
                            debugger;
                            $('#tblAuthgrid').empty();
                            if (data == ""Auth Fail"") {
                                $(""#Error"").html(""Authentication Failed,Your Session Failed"");
                                return false;
                            }
                            var tr;
                            if (data.length > 0) {
                                for (var i = 0; i < data.length; i++) {
                                    tr = $('<tr/>');
                                    tr.append(""<td OnClick='display(this,"" + data[i].ru");
                WriteLiteral(@"lesId + "");'  style='    cursor: pointer;'>"" + data[i].suiteName + ""</td>"");
                                    tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    cursor: pointer;'>"" + data[i].ruleName + ""</td>"");
                                    tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    cursor: pointer;'>"" + data[i].ruleParameter + ""</td>"");
                                    tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    cursor: pointer;'>"" + data[i].description + ""</td>"");
                                    tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    cursor: pointer;'>Active</td>"");

                                    $('#tblAuthgrid').append(tr);
                                }
                            }

                        },
                        error: function (Result) {

                        }

                    });
            });

        ");
                WriteLiteral(@"    $(""#Status"").prop('checked', true);
            $(""#update"").addClass(""hidden"");


            $(document).on(""click"", ""#Save"", function () {
                debugger;
                $(""#Error"").html("""");
                $(""#Success"").html("""");
                var Active = 1;
                //var Rule = $(""#ProductId"").val();
                //if (Rule == null || Rule == """" || Rule == undefined) {
                //    $(""#Error"").html(""Please Select on Suite Name"");
                //    return false;
                //}
                var Rule = """";
                var Rule1 = $(""#ProductId"").val();
                for (var i = 0; i < Rule1.length; i++) {
                    if (Rule == """") {
                        Rule = Rule1[i];
                    }
                    else {
                        Rule += "","" + Rule1[i];
                    }
                }
                if (Rule == """" || Rule == null || Rule == ""undefined"" || Rule == undefined) {
                ");
                WriteLiteral(@"    $(""#Error"").html(""Please Select Test Approach Name"");
                    return false;
                }
                var Name = $(""#RulesName"").val();
                if (Name == null || Name == """" || Name == undefined) {
                    $(""#Error"").html(""Please Enter Rule Name"");
                    return false;
                }
                var inValid = /\s/;
                if ((inValid.test(Name))) {

                    $(""#Error"").html('Rule Name cannot contain whitespace');
                    return false;
                }
                var Rulecondition = $(""#RulesCondition"").val();
                if (Rulecondition == null || Rulecondition == """" || Rulecondition == undefined) {
                    $(""#Error"").html(""Please Enter Rules Condition"");
                    return false;
                }
                var DemoName = $(""#RuleParameter"").val();
                if (DemoName == null || DemoName == """" || DemoName == undefined) {
                    $");
                WriteLiteral(@"(""#Error"").html(""Please Enter Rule Parameter"");
                    return false;
                }
                //var DBparameter = $(""#TestsuidId"").val();
                //if (DBparameter == null || DBparameter == """" || DBparameter == undefined) {
                //    $(""#Error"").html(""Please Select Connection"");
                //    return false;
                //}
                var rulesarray = """";
                for (var i = 0; i < DemoName; i++) {
                    var values = $(""#Ruleparameter"" + i).val();
                    if (values == """" || values == """" || values == undefined) {
                        $(""#Error"").html(""Please Enter Rule Parameter Name "" + i);
                        return false;
                    }
                    if (i == 0) {
                        rulesarray = values;
                    }
                    else {
                        rulesarray += "","" + values;
                    }

                }
                var des = ");
                WriteLiteral(@"$(""#Description"").val();
                if ($('#Status').is(':checked')) {
                    Active = 1;
                }
                else {
                    $(""#Error"").html(""Please Check Active Check box"");
                }

                $.ajax(
                    {
                        type: ""GET"", //HTTP POST Method
                        url: ""/DbConfig/RulesSaveGrid"", // Controller/View
                        datatype: ""json"",
                        data: {
                            SuiteName: Rule,
                            RuleName: Name,
                            Parameter: DemoName,
                            rulecond: Rulecondition,
                            Status: Active,
                            Description: des,
                            Ruleparameter: rulesarray,
                            //  connection: DBparameter,
                        },
                        headers: {
                            ""Content-Type"": JSON,
    ");
                WriteLiteral(@"                        'Authorization': localStorage.getItem(""AuthoToken""),
                        },
                        success: function (data) {
                            debugger;
                            if (data == ""Success"") {
                                $(""#Success"").html(""Rule Successfully Saved"");
                                Bindrid1(1);
                                clear();
                            }

                            else if (data == ""Auth Fail"") {
                                $(""#Error"").html(""Authentication Failed,Your Session Failed"");
                                return false;
                            }
                            else {
                                $(""#Error"").html(""Already Exits Rule Name"");
                            }

                        },
                        error: function (Result) {

                        }

                    });
            });

            $(document).on(""click"",");
                WriteLiteral(@" ""#update"", function () {
                debugger;
                $(""#Error"").html("""");
                $(""#Success"").html("""");
                var Active = 1;
                //var Rule = $(""#ProductId"").val();
                //if (Rule == null || Rule == """" || Rule == undefined) {
                //    $(""#Error"").html(""Please Select on Suite Name"");
                //    return false;
                //}
                var Rule = """";
                var Rule1 = $(""#ProductId"").val();
                for (var i = 0; i < Rule1.length; i++) {
                    if (Rule == """") {
                        Rule = Rule1[i];
                    }
                    else {
                        Rule += "","" + Rule1[i];
                    }
                }
                if (Rule == """" || Rule == null || Rule == ""undefined"" || Rule == undefined) {
                    $(""#Error"").html(""Please Select Test Approach Name"");
                    return false;
                }
           ");
                WriteLiteral(@"     var Name = $(""#RulesName"").val();
                if (Name == null || Name == """" || Name == undefined) {
                    $(""#Error"").html(""Please Enter Rule Name"");
                    return false;
                }
                var inValid = /\s/;
                if ((inValid.test(Name))) {

                    $(""#Error"").html('Rule Name cannot contain whitespace');
                    return false;
                }
                var Rulecondition = $(""#RulesCondition"").val();
                if (Rulecondition == null || Rulecondition == """" || Rulecondition == undefined) {
                    $(""#Error"").html(""Please Enter Rules Condition"");
                    return false;
                }
                var DemoName = $(""#RuleParameter"").val();
                if (DemoName == null || DemoName == """" || DemoName == undefined) {
                    $(""#Error"").html(""Please Enter Parameter Count"");
                    return false;
                }
                var ");
                WriteLiteral(@"rulesarray = """";
                for (var i = 0; i < DemoName; i++) {
                    var values = $(""#Ruleparameter"" + i).val();
                    if (values == """" || values == """" || values == undefined) {
                        $(""#Error"").html(""Please Enter Rule Parameter Name "" + i);
                        return false;
                    }
                    if (i == 0) {
                        rulesarray = values;
                    }
                    else {
                        rulesarray += "","" + values;
                    }

                }
                //var DBparameter = $(""#TestsuidId"").val();
                //if (DBparameter == null || DBparameter == """" || DBparameter == undefined) {
                //    $(""#Error"").html(""Please Select Connection"");
                //    return false;
                //}

                var des = $(""#Description"").val();
                if ($('#Status').is(':checked')) {
                    Active = 1;
          ");
                WriteLiteral(@"      }
                else {
                    Active = 0;
                }
                var RuleId = $(""#RuleId"").val();
                $.ajax(
                    {
                        type: ""GET"", //HTTP POST Method
                        url: ""/DbConfig/RulesUpdate"", // Controller/View
                        datatype: ""json"",
                        data: {
                            SuiteName: Rule,
                            RuleName: Name,
                            Parameter: DemoName,
                            rulecond: Rulecondition,
                            Status: Active,
                            Description: des,
                            RulesId: RuleId,
                            Ruleparameter: rulesarray,
                            //   connection: DBparameter,
                        },
                        headers: {
                            ""Content-Type"": JSON,
                            'Authorization': localStorage.getItem(""Auth");
                WriteLiteral(@"oToken""),
                        },
                        success: function (data) {
                            debugger;
                            if (data == ""Success"") {
                                $(""#Success"").html(""Rule Successfully Updated"");
                                Bindrid1(1);
                                clear();
                            } else if (data == ""Validate"") {
                                $(""#Error"").html('Please ""Set As InActive"" ETLDB for this ETL Rules');
                                return false;
                            }
                            else if (data == ""Auth Fail"") {
                                $(""#Error"").html(""Authentication Failed,Your Session Failed"");
                                return false;
                            }
                            else {
                                $(""#Error"").html(""Already Exits Rule Name"");
                            }

                        },
                ");
                WriteLiteral(@"        error: function (Result) {

                        }

                    });
            });
            $(document).on('click', '#Clear', function () {
                clear();
                $(""#Error"").html("""");
                $(""#Success"").html("""");
                var table = document.getElementById('example');
                var cells = table.getElementsByTagName('td');
                for (var i = 0; i < cells.length; i++) {
                    var rowsNotSelected = table.getElementsByTagName('tr');
                    for (var row = 0; row < rowsNotSelected.length; row++) {
                        rowsNotSelected[row].style.backgroundColor = """";
                        rowsNotSelected[row].classList.remove('highlight');
                    }
                }
            });
            function clear() {
                $(""#ParameterName"").empty();
                $(""#RuleParameter"").val('');
                $(""#RulesName"").val('');
                $(""#ProductId"")");
                WriteLiteral(@".val('');
                $(""#Description"").val('');
                $(""#RulesCondition"").val('');
                $(""#Rulestatus"").val(""1"");
                $(""#InActive"").removeClass(""hidden"");
                $(""#Active"").addClass(""hidden"");
                $(""#RuleId"").val('');
                $(""#Save"").removeClass(""hidden"");
                // $(""#TestsuidId"").val('');
                $(""#update"").addClass(""hidden"");
                $(""#ProductId"").trigger(""chosen:updated"");
                $('.chosen').chosen(""destroy"").chosen();
            }

            $(document).on(""change"", ""#RuleParameter"", function () {
                var parameter = $(""#RuleParameter"").val();
                $(""#ParameterName"").empty();
                for (var i = 0; i < parameter; i++) {
                    $(""#ParameterName"").append(""<div class='col-md-3 col-lg-3 col-xs-3 col-sm-3' style=' padding-bottom:10px'><label>Rule Parameter Name "" + i + ""</label> <input type='text' class='form-control' id='Rulepa");
                WriteLiteral(@"rameter"" + i + ""' value="" + (i == 0 ? ""Schema"" : i == 1 ? ""Table_name"" : ""Column_Name"") + "" /> </div>"")
                }
            });

            $(document).on(""click"", ""#excel"", function () {
                var uri = 'data:application/vnd.ms-excel;base64,'
                    , template = '<html xmlns:o=""urn:schemas-microsoft-com:office:office"" xmlns:x=""urn:schemas-microsoft-com:office:excel"" xmlns=""http://www.w3.org/TR/REC-html40""><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>'
                    , base64 = function (s) { return window.btoa(unescape(encodeURIComponent(s))) }
                    , format = function (s, c) { return s.replace(/{(\w+)}/g, function (m, p) { return c[p]; }) }

                var table = document.getElementById(""ex");
                WriteLiteral(@"ample"");
                //var example1 = $('.example1');

                //var filters = $('.ng-table-filters').remove();
                var ctx = { worksheet: name || 'Worksheet', table: table.innerHTML };
                //$('.ng-table-sort-header').after(filters);
                var url = uri + base64(format(template, ctx));
                var a = document.createElement('a');
                a.href = url;

                //var today = new Date();
                //var date = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + ' ' + today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();

                a.download = 'ETL/Rules.xls';
                a.click();
            });
            $('#formid').on('keyup keypress', function (e) {
                var keyCode = e.keyCode || e.which;
                if (keyCode === 13) {
                    e.preventDefault();
                    return false;
                }
            });
        ");
                WriteLiteral(@"});

        Bindrid(1);
        function Bindrid(status) {
            if (status == ""1"") {
                $(""#InActive"").removeClass(""hidden"");
                $(""#Active"").addClass(""hidden"");
                $(""#Rulestatus"").val(""1"");
            }
            else {
                $(""#InActive"").addClass(""hidden"");
                $(""#Active"").removeClass(""hidden"");
                $(""#Rulestatus"").val(""0"");
            }
            $.ajax(
                {
                    type: ""GET"", //HTTP POST Method
                    url: ""/DbConfig/RulesBindGrid"", // Controller/View
                    datatype: ""json"",
                    data: { status: status },
                    headers: {
                        ""Content-Type"": JSON,
                        'Authorization': localStorage.getItem(""AuthoToken""),
                    },
                    success: function (data) {
                        debugger;
                        $('#tblAuthgrid').empty();
           ");
                WriteLiteral(@"             if (data == ""Auth Fail"") {
                            $(""#Error"").html(""Authentication Failed,Your Session Failed"");
                            return false;
                        }
                        if (data.length > 0) {
                            for (var i = 0; i < data.length; i++) {
                                var tr;
                                tr = $('<tr/>');
                                tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    cursor: pointer;'>"" + data[i].rulesId + ""</td>"");
                                tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    cursor: pointer;'>"" + data[i].suiteName + ""</td>"");
                                tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    cursor: pointer;'>"" + data[i].ruleName + ""</td>"");
                                tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    cursor: pointer;'>"" + dat");
                WriteLiteral(@"a[i].ruleParameter + ""</td>"");
                                tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    cursor: pointer;'>"" + data[i].description + ""</td>"");
                                tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    cursor: pointer;'>"" + data[i].status + ""</td>"");
                                tr.append(""<td> <span  OnClick='deletefun("" + data[i].rulesId + "");'  style='cursor: pointer;'>  "" + (data[i].status == ""Inactive"" ? ""<img src='http://40.115.111.12:5000/Image/delete-trash-icon-256.png' style='height:25px' />"" : """") + "" </span></td>"");
                                $('#tblAuthgrid').append(tr);
                            }
                            $('#example').DataTable({
                                paging: true,
                                scrollX: true,
                                lengthChange: true,
                                searching: true,
                                orderi");
                WriteLiteral(@"ng: false
                            });

                        }

                    },
                    error: function (Result) {

                    }

                });
        }

        function Bindrid1(status) {
            if (status == ""1"") {
                $(""#InActive"").removeClass(""hidden"");
                $(""#Active"").addClass(""hidden"");
                $(""#Rulestatus"").val(""1"");
            }
            else {
                $(""#InActive"").addClass(""hidden"");
                $(""#Active"").removeClass(""hidden"");
                $(""#Rulestatus"").val(""0"");
            }
            $.ajax(
                {
                    type: ""GET"", //HTTP POST Method
                    url: ""/DbConfig/RulesBindGrid"", // Controller/View
                    datatype: ""json"",
                    data: { status: status },
                    headers: {
                        ""Content-Type"": JSON,
                        'Authorization': localStorage.getItem(""Auth");
                WriteLiteral(@"oToken""),
                    },
                    success: function (data) {
                        debugger;
                        $('#tblAuthgrid').empty();
                        if (data == ""Auth Fail"") {
                            $(""#Error"").html(""Authentication Failed,Your Session Failed"");
                            return false;
                        }
                        if (data.length > 0) {
                            for (var i = 0; i < data.length; i++) {
                                var tr;
                                tr = $('<tr/>');
                                tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    cursor: pointer;'>"" + data[i].rulesId + ""</td>"");
                                tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    cursor: pointer;'>"" + data[i].suiteName + ""</td>"");
                                tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    curs");
                WriteLiteral(@"or: pointer;'>"" + data[i].ruleName + ""</td>"");
                                tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    cursor: pointer;'>"" + data[i].ruleParameter + ""</td>"");
                                tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    cursor: pointer;'>"" + data[i].description + ""</td>"");
                                tr.append(""<td OnClick='display(this,"" + data[i].rulesId + "");'  style='    cursor: pointer;'>"" + data[i].status + ""</td>"");
                                tr.append(""<td> <span  OnClick='deletefun("" + data[i].rulesId + "");'  style='cursor: pointer;'>  "" + (data[i].status == ""Inactive"" ? ""<img src='http://40.115.111.12:5000/Image/delete-trash-icon-256.png' style='height:25px' />"" : """") + "" </span></td>"");
                                $('#tblAuthgrid').append(tr);
                            }


                        }

                    },
                    error: function (Result) {

   ");
                WriteLiteral(@"                 }

                });
        }


        function deletefun(Ruid) {
            $.ajax(
                {
                    type: ""GET"", //HTTP POST Method
                    url: ""/DbConfig/deleteRule"", // Controller/View
                    datatype: ""json"",
                    data: { RulesId: Ruid },
                    headers: {
                        ""Content-Type"": JSON,
                        'Authorization': localStorage.getItem(""AuthoToken""),
                    },
                    success: function (data) {
                        debugger;
                        if (data == ""Auth Fail"") {
                            $(""#Error"").html(""Authentication Failed"");
                            return false;
                        }

                        Bindrid1(1);
                    },
                    error: function (Result) {

                    }

                });
        }

        function display(a, val) {
            $(""#");
                WriteLiteral(@"Error"").html("""");
            $(""#Success"").html("""");
            $(""#Save"").addClass(""hidden"");
            $(""#update"").removeClass(""hidden"");
            var table = document.getElementById('example');
            var cells = table.getElementsByTagName('td');
            for (var i = 0; i < cells.length; i++) {
                var rowsNotSelected = table.getElementsByTagName('tr');
                for (var row = 0; row < rowsNotSelected.length; row++) {
                    rowsNotSelected[row].style.backgroundColor = """";
                    rowsNotSelected[row].classList.remove('highlight');
                }
            }
            a.parentNode.classList.add(""highlight"");
            debugger;
            $.ajax(
                {
                    type: ""GET"", //HTTP POST Method
                    url: ""/DbConfig/EditRuleset"", // Controller/View
                    datatype: ""json"",
                    data: { Rulesetvalue: val },
                    headers: {
                ");
                WriteLiteral(@"        ""Content-Type"": JSON,
                        'Authorization': localStorage.getItem(""AuthoToken""),
                    },
                    success: function (data) {
                        if (data == ""Auth Fail"") {
                            $(""#Error"").html(""Authentication Failed,Your Session Failed"");
                            return false;
                        }
                        var result = data;
                        $(""#RuleParameter"").val(data[""0""].ruleParameter);
                        $(""#RulesName"").val(data[""0""].ruleName);
                        var testid = """";
                        var testapproach = data[""0""].testApproachid;
                        if (testapproach != """") {
                            testid = data[""0""].testApproachid.split("","");
                        }

                        $(""#ProductId"").val(testid).trigger('chosen:updated');
                        $('#ProductId').trigger('liszt:updated');
                        $(""#De");
                WriteLiteral(@"scription"").val(data[""0""].description);
                        $(""#RulesCondition"").val(data[""0""].ruleCondtion);
                        $(""#RuleId"").val(data[""0""].rulesId);
                        // $(""#TestsuidId"").val(data[""0""].dbConfigId);
                        var Paramterlenth = data[""0""].ruleParamtername.length;
                        $(""#ParameterName"").empty();
                        for (var i = 0; i < Paramterlenth; i++) {

                            $(""#ParameterName"").append(""<div class='col-md-3 col-lg-3 col-xs-3 col-sm-3' style=' padding-bottom:10px'><label>Rule Parameter Name "" + i + ""</label> <input type='text' class='form-control' id='Ruleparameter"" + i + ""' value="" + data[""0""].ruleParamtername[i].parameterName + "" /> </div>"")
                        }
                        var status = data[""0""].status;
                        if (status == ""1"") {
                            $(""#Status"").prop(""checked"", true);
                        }
                        else {
");
                WriteLiteral(@"                            $(""#Status"").prop(""checked"", false);
                        }
                        debugger;

                    },
                    error: function (Result) {
                    }

                });
        }


        $(document).ready(function () {
            debugger;
            $(""#ProductId"").trigger(""chosen:updated"");
            $('#ProductId').chosen(""destroy"").chosen();
            //    $("".chosen"").chosen();

        });
    </script>
    <div>


        <h3 style=""        color: #ba9122; padding: 14px; margin-left: 42px;"">ETL/DB Rules</h3>
        <div class=""container"" style="" background-color: white;  padding-bottom: unset;"">
            <div class="" container-scroller"">

                <div class=""container-fluid page-body-wrapper"">

                    <div class=""main-panel"">
                        <div class=""content-wrapper"" style=""padding: 1.5rem .8rem .5rem 2rem;"">

                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cc3c0d2ce1638a2ea9c12e1211d283cc44b2969643506", async() => {
                    WriteLiteral(@"
                                <div class=""form"">
                                    <div class=""row"" style=""padding-bottom: 20px;"">
                                        <div class=""col-lg-3 col-md-3 col-xs-3 col-sm-3"" style=""text-align: left;"">
                                            <label><span style=""color: red;"">* </span>Test Approach</label><br />
");
                    WriteLiteral("                                            ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cc3c0d2ce1638a2ea9c12e1211d283cc44b2969644236", async() => {
                        WriteLiteral("\r\n                                            ");
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
#nullable restore
#line 677 "D:\Abinesh\Xautomatedocker\Xautomate_docker\XAutomateMVC\XAutomateMVC\Views\DbConfig\RulesSet.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.ProductId);

#line default
#line hidden
#nullable disable
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
#nullable restore
#line 679 "D:\Abinesh\Xautomatedocker\Xautomate_docker\XAutomateMVC\XAutomateMVC\Views\DbConfig\RulesSet.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = (new SelectList(Model.Listofproducts,"Value", "Text"));

#line default
#line hidden
#nullable disable
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral(@"
                                        </div>
                                        <div class=""col-lg-3 col-md-3 col-sm-3 col-xs-3"" style=""text-align: left;"">
                                            <label><span style=""color: red;"">* </span>Rule Name</label><br />
                                            <input type=""text"" id=""RulesName"" name=""Name"" class=""txt-input form-control"" />
                                        </div>

                                        <div class=""col-lg-3 col-xs-3 col-md-3 col-sm-3"">
                                            <label><span style=""color: red;"">* </span>Rule Parameter</label><br />
                                            <input type=""number"" id=""RuleParameter"" name=""RuleParameter"" class=""txt-input form-control"" />
                                        </div>
");
                    WriteLiteral(@"                                        <div class=""col-lg-12 col-xs-12 col-md-12 col-xs-12"" style=""text-align: left;"">
                                            <label><span style=""color: red;"">* </span>Rule</label><br />
                                            <textarea type=""text"" id=""RulesCondition"" name=""Name"" class=""txt-input"" style=""resize: none; width: 100%; border-radius: 0.25rem; border: 1px solid #ced4da;""></textarea>
                                        </div>
                                    </div>

                                    <div Id=""ParameterName"" class=""row"">

                                    </div>
                                    <div class=""row"" style=""padding-top:1em;"">

                                        <div class=""col-lg-3 col-md-3 col-xs-6 col-sm-6"">
                                            <label>Description</label> <br />
                                            <input type=""text"" id=""Description"" class=""form-control"" maxlength=""50"" ");
                    WriteLiteral("/>\r\n");
                    WriteLiteral(@"                                        </div>

                                    </div>
                                    <div class=""row"">


                                        <div class=""panel11"" id=""empheight"" style=""padding-bottom:20px;"">
                                            <div class=""row"">


                                                <div class=""col-lg-12 col-md-12 col-xs-12"" style=""padding-top:30px;"">
                                                    <input type=""file"" name=""files"" multiple class=""button"" style="" box-shadow: unset; background: unset; background-color: unset; color: unset;padding-left:15px"" />
                                                </div>
                                                <div class=""col-lg-3 col-xs-12"" style=""padding-top:30px;"">
                                                    ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("button", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cc3c0d2ce1638a2ea9c12e1211d283cc44b2969649577", async() => {
                        WriteLiteral("Upload ");
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper.Controller = (string)__tagHelperAttribute_5.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper.Action = (string)__tagHelperAttribute_6.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral("\r\n                                                </div>\r\n\r\n                                                <div class=\"col-lg-3 col-xs-12\" style=\"padding-top:30px;\">\r\n\r\n                                                    ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("button", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cc3c0d2ce1638a2ea9c12e1211d283cc44b2969651614", async() => {
                        WriteLiteral(" Template");
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper.Controller = (string)__tagHelperAttribute_5.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper.Action = (string)__tagHelperAttribute_9.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral(@"

                                                </div>
                                                <!--Import Template table  -->
                                                <table id=""exampleimport"" border=""1"" style=""display:none; border:1px solid"">
                                                    <thead class=""thead-bold"" style=""border: 1px solid black;"">
                                                        <tr style=""background-color: #BFD0D8 !important;"">
                                                            <th class=""th-bold"">
                                                               R Id
                                                            </th>
                                                            <th class=""th-bold"">
                                                                Test Approach
                                                            </th>
                                                            <th class=""th-bold"">
         ");
                    WriteLiteral(@"                                                       Rule Name
                                                            </th>
                                                            <th class=""th-bold"">
                                                                Parameter
                                                            </th>
                                                            <th class=""th-bold"">
                                                                Query
                                                            </th>
                                                            <th class=""th-bold"">
                                                                Parameter Name 0
                                                            </th>
                                                            <th class=""th-bold"">
                                                                Parameter Name 1
                                                    ");
                    WriteLiteral(@"        </th>
                                                            <th class=""th-bold"">
                                                                Description

                                                            </th>
                                                        </tr>
                                                    </thead>
                                                    <tbody style=""border: 1px solid black;"">
                                                    </tbody>
                                                </table>
                                                <!--/.Import Template table  -->
                                            </div>

                                        </div>
                                    </div>
                                </div>


                            ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_10.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                        </div>


                    </div>
                </div>
                <div>
                    <input type=""text"" disabled id=""Testrule"" class=""hidden"" />
                </div>

            </div>
        </div>
        <div class=""container"" style=""        background-color: #eeeeee;
        padding: 10px;
        padding-bottom: unset;
        margin-top: 15px"">
            <div class=""row"" style=""        padding: 10px
"">
                <div class=""col-lg-6 col-md-6 col-xs-6  col-sm-6"" style=""text-align:left"">
                    <input type=""checkbox"" id=""Status""> Set As active
                    <div class=""col-lg-12 col-md-12 col-sm-12 col-xs-12"">
                        <label style=""text-align:center;color:red"" id=""Error""></label>
                        <label style=""text-align:center;color:green"" id=""Success""></label>
                    </div>
                </div>
                <div class=""col-lg-6 col-md-6 col-xs-6  col-sm-6"" style=""text");
                WriteLiteral(@"-align:right"">
                    <input type=""button"" class=""text-center center-block"" style=""        color: white;background-color: #c9a642"" id=""Save"" value=""SAVE"">
                    <input type=""button"" class=""text-center center-block hidden"" style=""       color: white;background-color: #c9a642"" id=""update"" value=""Update"">
                    <input type=""button"" class=""text-center center-block clear"" style=""   color: black;"" id=""Clear"" value=""Clear"">
                    <input type=""hidden"" id=""RuleId"" />
                    <input type=""hidden"" id=""Rulestatus"" />
                </div>

            </div>
        </div>
        <div class=""container"" style=""        background-color: white;

        padding-bottom: unset;
        margin-top: 15px"">

            <div class=""container"" style=""     background-color: white;    padding: 44px; padding-top: 15px; padding-bottom: 100px;"">
                <div class=""content"">
                    <div class="" container-scroller"">


");
                WriteLiteral("                        <div class=\"form-group\" id=\"Excelpos\">\r\n\r\n\r\n                            <button type=\"button\" class=\"btn  btn-sm\" id=\"excel\">\r\n                                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "cc3c0d2ce1638a2ea9c12e1211d283cc44b2969660358", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                            </button>
                        </div>
                        <div class=""row"" style=""margin-top:10px"">
                            <div class=""col-sm-12 mat-elevation-z8""
                                 style=""box-shadow: unset;padding: 0px ;"" #TABLE>
                                <table class=""table"" id=""example"" style=""width: 100%;"" border=""1"">
                                    <thead>
                                        <tr>
                                            <td style=""width:120px"">
                                                R Id
                                            </td>
                                            <td style=""width:120px"">
                                                Test Approach
                                            </td>
                                            <td style=""width:50px"">
                                                Rule Name
                                            </td>
   ");
                WriteLiteral(@"                                         <td style=""width:20px"">
                                                Rule Parameter
                                            </td>
                                            <td style=""        width: 300px"">
                                                Description
                                            </td>
                                            <td style=""width:50px"">
                                                Status
                                            </td>
                                            <td>
                                                Delete
                                            </td>
                                        </tr>
                                    </thead>
                                    <tbody id=""tblAuthgrid""></tbody>

                                </table>
                            </div>

                        </div>
                    </div>
              ");
                WriteLiteral(@"      <!-- partial:../../partials/_footer.html -->

                </div>


            </div>

        </div>
        <!-- partial:../../partials/_footer.html -->

    </div>
    </div>

    </div>


    <!-- /#page-content-wrapper -->
    <!-- /#wrapper -->
    <!-- Bootstrap core JavaScript -->
    <script src=""http://52.157.105.144:5000/vendor/bootstrap/js/bootstrap.bundle.min.js""></script>
    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cc3c0d2ce1638a2ea9c12e1211d283cc44b2969664106", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n\r\n    <!-- Menu Toggle Script -->\r\n    <script>\r\n        $(\"#menu-toggle\").click(function (e) {\r\n            e.preventDefault();\r\n            $(\"#wrapper\").toggleClass(\"toggled\");\r\n        });\r\n    </script>\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<ProductViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
